import heapq

def astar(graph, start, goal):
    open_list = [(0, start)]
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph}
    f_score[start] = heuristic(start, goal)

    while open_list:
        _, current = heapq.heappop(open_list)

        if current == goal:
            return reconstruct_path(came_from, current)

        for neighbor in graph[current]:
            tentative_g_score = g_score[current] + graph[current][neighbor]

            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f_score[neighbor], neighbor))

    return None  # No path found

def heuristic(node, goal):
    # Esta es la función heurística que debe proporcionarse. Debe ser admissible (nunca sobreestimar el costo).
    # Puedes personalizarla según el problema que estés resolviendo.
    return 0  # En este ejemplo, la heurística es cero.

def reconstruct_path(came_from, current):
    path = [current]
    while current in came_from:
        current = came_from[current]
        path.append(current)
    path.reverse()
    return path

# Ejemplo de uso:
graph = {
    'A': {'B': 1, 'C': 3},
    'B': {'A': 1, 'D': 4, 'E': 2},
    'C': {'A': 3},
    'D': {'B': 4},
    'E': {'B': 2}
}

start_node = 'A'
goal_node = 'D'

path = astar(graph, start_node, goal_node)
if path:
    print(f"Camino más corto desde {start_node} a {goal_node}: {path}")
else:
    print("No se encontró un camino desde el nodo inicial al nodo objetivo.")
